plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id 'maven-publish'
}

group = 'com.fluidnotions'
version = '0.2.9'


java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.camunda.bpm:camunda-external-task-client:7.21.0-alpha2'
	implementation 'org.camunda.spin:camunda-spin-core:1.22.0'
	implementation 'org.camunda.spin:camunda-spin-dataformat-json-jackson:1.22.0'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:+'//handle LocalDateTime
	//NOTE: The following dependency is required for the Camunda external task client, must contain a class needed by the client
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation platform('org.junit:junit-bom:5.10.0')
	testImplementation 'org.junit.jupiter:junit-jupiter'
}

task customFatJar(type: Jar) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from sourceSets.main.output
	from {

		configurations.runtimeClasspath.collect {
			if(it.isDirectory()) {
				it
			} else {
				def tree = zipTree(it)
				tree.matching {
					exclude 'org/springframework/**'
				}
			}
		}
	}
}

def properties = new Properties()
file(project.rootDir.absolutePath + "/local.properties").withInputStream { properties.load(it) }

publishing {
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/fluidnotions/spring-boot-camunda-flow")
			credentials {
				username = properties.getProperty('github.username')
				password = properties.getProperty('github.token')
			}
		}
	}
	publications {
		gpr(MavenPublication) {
			artifactId = 'spring-boot-camunda-flow'
			artifact customFatJar
		}
	}
}

publish.dependsOn customFatJar


test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}







